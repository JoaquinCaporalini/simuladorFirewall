-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module LexSimFirewall where



import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \; | "src" \- "mac" | \- "t" | \- "A" | \- "D" | \- "R" | \- "I" | \- "F" | \- "P" | \- "p" | \! | \- "s" | \- "d" | \- "i" | \- "o" | \- "m" | \- \- "state" | \- \- "mac" \- "sourse" | \, | \. | \/ | \- \- "dport" | \- \- "sport" | \: | \- \- "tcp" \- "flags" | \- \- "icmp" \- "type" | \- "j"

:-
"#" [.]* ; -- Toss single line comments
"#/" ([$u # \/] | \/+ [$u # [\/ \#]])* ("/")+ "#" ;

$white+ ;
@rsyms
    { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }

$l $i*
    { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t | r | f)))* \"
    { tok (\p s -> PT p (TL $ share $ unescapeInitTail s)) }

$d+
    { tok (\p s -> PT p (TI $ share s))    }


{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos [] = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> "#error"


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b "INPUT" 41 (b "-s" 21 (b "-F" 11 (b "--sport" 6 (b "--dport" 3 (b "," 2 (b "!" 1 N N) N) (b "--mac-sourse" 5 (b "--icmp-type" 4 N N) N)) (b "-A" 9 (b "--tcp-flags" 8 (b "--state" 7 N N) N) (b "-D" 10 N N))) (b "-i" 16 (b "-R" 14 (b "-P" 13 (b "-I" 12 N N) N) (b "-d" 15 N N)) (b "-o" 19 (b "-m" 18 (b "-j" 17 N N) N) (b "-p" 20 N N)))) (b "END_HOST" 31 (b ";" 26 (b "/" 24 (b "." 23 (b "-t" 22 N N) N) (b ":" 25 N N)) (b "CLOSE_WAIT" 29 (b "CLOSE" 28 (b "ACCEPT" 27 N N) N) (b "DROP" 30 N N))) (b "FORDWARD" 36 (b "ESTABLISHED" 34 (b "END_RULES" 33 (b "END_PACKAGES" 32 N N) N) (b "FIN_WAIT" 35 N N)) (b "INIT_PACKAGES" 39 (b "INIT_HOST" 38 (b "ICMP" 37 N N) N) (b "INIT_RULES" 40 N N))))) (b "dport" 62 (b "RETURN" 52 (b "OUTPUT" 47 (b "LISTEN" 44 (b "LAST_ACK" 43 (b "INVALID" 42 N N) N) (b "NONE" 46 (b "NEW" 45 N N) N)) (b "REGECT" 50 (b "PREROUTING" 49 (b "POSTROUTING" 48 N N) N) (b "RELATED" 51 N N))) (b "UDP" 57 (b "TCP" 55 (b "SYN_SENT" 54 (b "SYN_RECV" 53 N N) N) (b "TIME_WAIT" 56 N N)) (b "dcode" 60 (b "all" 59 (b "Use" 58 N N) N) (b "did" 61 N N)))) (b "scode" 72 (b "interfaz" 67 (b "filter" 65 (b "dtype" 64 (b "dst" 63 N N) N) (b "icmp" 66 N N)) (b "mangle" 70 (b "mac" 69 (b "ip" 68 N N) N) (b "nat" 71 N N))) (b "state" 77 (b "src" 75 (b "spot" 74 (b "sid" 73 N N) N) (b "src-mac" 76 N N)) (b "ttl" 80 (b "tcp" 79 (b "stype" 78 N N) N) (b "udp" 81 N N)))))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
